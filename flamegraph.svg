<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="46494401"><g><title>&lt;oxidator::coordinator::sequencer::MultiProducerSequencer&lt;W&gt; as oxidator::traits::traits::Sequencer&gt;::next (2,093,682 samples, 4.50%)</title><rect x="0.0000%" y="501" width="4.5031%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2093682"/><text x="0.2500%" y="511.50">&lt;oxid..</text></g><g><title>oxidator::coordinator::sequencer::MultiProducerSequencer&lt;W&gt;::buffer_has_capacity (2,093,682 samples, 4.50%)</title><rect x="0.0000%" y="485" width="4.5031%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2093682"/><text x="0.2500%" y="495.50">oxida..</text></g><g><title>[unknown] (9,896,632 samples, 21.29%)</title><rect x="4.5031%" y="501" width="21.2856%" height="15" fill="rgb(221,193,54)" fg:x="2093682" fg:w="9896632"/><text x="4.7531%" y="511.50">[unknown]</text></g><g><title>&lt;oxidator::coordinator::sequencer::MultiProducerSequencer&lt;W&gt; as oxidator::traits::traits::Sequencer&gt;::publish (9,896,632 samples, 21.29%)</title><rect x="4.5031%" y="485" width="21.2856%" height="15" fill="rgb(248,212,6)" fg:x="2093682" fg:w="9896632"/><text x="4.7531%" y="495.50">&lt;oxidator::coordinator::sequencer:..</text></g><g><title>core::sync::atomic::AtomicI64::load (4,548,977 samples, 9.78%)</title><rect x="16.0048%" y="469" width="9.7839%" height="15" fill="rgb(208,68,35)" fg:x="7441337" fg:w="4548977"/><text x="16.2548%" y="479.50">core::sync::at..</text></g><g><title>core::sync::atomic::atomic_load (4,548,977 samples, 9.78%)</title><rect x="16.0048%" y="453" width="9.7839%" height="15" fill="rgb(232,128,0)" fg:x="7441337" fg:w="4548977"/><text x="16.2548%" y="463.50">core::sync::at..</text></g><g><title>&lt;oxidator::consumer::orchestrator::ConsumerOrchestrator as oxidator::traits::traits::Orchestrator&gt;::start::_{{closure}} (8,239,954 samples, 17.72%)</title><rect x="25.7887%" y="293" width="17.7225%" height="15" fill="rgb(207,160,47)" fg:x="11990314" fg:w="8239954"/><text x="26.0387%" y="303.50">&lt;oxidator::consumer::orchest..</text></g><g><title>&lt;oxidator::consumer::consumer::Consumer&lt;T,F,D,S&gt; as oxidator::traits::traits::Worker&gt;::run (8,239,954 samples, 17.72%)</title><rect x="25.7887%" y="277" width="17.7225%" height="15" fill="rgb(228,23,34)" fg:x="11990314" fg:w="8239954"/><text x="26.0387%" y="287.50">&lt;oxidator::consumer::consume..</text></g><g><title>&lt;alloc::boxed::Box&lt;dyn oxidator::traits::traits::Task&lt;T&gt;+core::marker::Sync+core::marker::Send&gt; as oxidator::traits::traits::Task&lt;T&gt;&gt;::execute_task (8,239,954 samples, 17.72%)</title><rect x="25.7887%" y="261" width="17.7225%" height="15" fill="rgb(218,30,26)" fg:x="11990314" fg:w="8239954"/><text x="26.0387%" y="271.50">&lt;alloc::boxed::Box&lt;dyn oxida..</text></g><g><title>&lt;multi_producer::SumTask as oxidator::traits::traits::Task&lt;multi_producer::Event&gt;&gt;::execute_task (8,239,954 samples, 17.72%)</title><rect x="25.7887%" y="245" width="17.7225%" height="15" fill="rgb(220,122,19)" fg:x="11990314" fg:w="8239954"/><text x="26.0387%" y="255.50">&lt;multi_producer::SumTask as ..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8,239,954 samples, 17.72%)</title><rect x="25.7887%" y="229" width="17.7225%" height="15" fill="rgb(250,228,42)" fg:x="11990314" fg:w="8239954"/><text x="26.0387%" y="239.50">&lt;alloc::sync::Arc&lt;T,A&gt; as co..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (8,239,954 samples, 17.72%)</title><rect x="25.7887%" y="213" width="17.7225%" height="15" fill="rgb(240,193,28)" fg:x="11990314" fg:w="8239954"/><text x="26.0387%" y="223.50">alloc::sync::Arc&lt;T,A&gt;::inner</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (8,239,954 samples, 17.72%)</title><rect x="25.7887%" y="197" width="17.7225%" height="15" fill="rgb(216,20,37)" fg:x="11990314" fg:w="8239954"/><text x="26.0387%" y="207.50">core::ptr::non_null::NonNull..</text></g><g><title>&lt;oxidator::coordinator::sequencer::MultiProducerSequencer&lt;W&gt; as oxidator::traits::traits::Sequencer&gt;::publish (7,060,967 samples, 15.19%)</title><rect x="43.5112%" y="277" width="15.1867%" height="15" fill="rgb(206,188,39)" fg:x="20230268" fg:w="7060967"/><text x="43.7612%" y="287.50">&lt;oxidator::coordinator:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (16,689,112 samples, 35.89%)</title><rect x="25.7887%" y="453" width="35.8949%" height="15" fill="rgb(217,207,13)" fg:x="11990314" fg:w="16689112"/><text x="26.0387%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Arg..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (16,689,112 samples, 35.89%)</title><rect x="25.7887%" y="437" width="35.8949%" height="15" fill="rgb(231,73,38)" fg:x="11990314" fg:w="16689112"/><text x="26.0387%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Arg..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (16,689,112 samples, 35.89%)</title><rect x="25.7887%" y="421" width="35.8949%" height="15" fill="rgb(225,20,46)" fg:x="11990314" fg:w="16689112"/><text x="26.0387%" y="431.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (16,689,112 samples, 35.89%)</title><rect x="25.7887%" y="405" width="35.8949%" height="15" fill="rgb(210,31,41)" fg:x="11990314" fg:w="16689112"/><text x="26.0387%" y="415.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (16,689,112 samples, 35.89%)</title><rect x="25.7887%" y="389" width="35.8949%" height="15" fill="rgb(221,200,47)" fg:x="11990314" fg:w="16689112"/><text x="26.0387%" y="399.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (16,689,112 samples, 35.89%)</title><rect x="25.7887%" y="373" width="35.8949%" height="15" fill="rgb(226,26,5)" fg:x="11990314" fg:w="16689112"/><text x="26.0387%" y="383.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (16,689,112 samples, 35.89%)</title><rect x="25.7887%" y="357" width="35.8949%" height="15" fill="rgb(249,33,26)" fg:x="11990314" fg:w="16689112"/><text x="26.0387%" y="367.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (16,689,112 samples, 35.89%)</title><rect x="25.7887%" y="341" width="35.8949%" height="15" fill="rgb(235,183,28)" fg:x="11990314" fg:w="16689112"/><text x="26.0387%" y="351.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::op..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (16,689,112 samples, 35.89%)</title><rect x="25.7887%" y="325" width="35.8949%" height="15" fill="rgb(221,5,38)" fg:x="11990314" fg:w="16689112"/><text x="26.0387%" y="335.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{c..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (16,689,112 samples, 35.89%)</title><rect x="25.7887%" y="309" width="35.8949%" height="15" fill="rgb(247,18,42)" fg:x="11990314" fg:w="16689112"/><text x="26.0387%" y="319.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>multi_producer::main::_{{closure}} (8,449,158 samples, 18.17%)</title><rect x="43.5112%" y="293" width="18.1724%" height="15" fill="rgb(241,131,45)" fg:x="20230268" fg:w="8449158"/><text x="43.7612%" y="303.50">multi_producer::main::_{{clo..</text></g><g><title>&lt;oxidator::producer::producer::Producer&lt;T,S,D&gt; as oxidator::traits::traits::EventProducer&gt;::write (1,388,191 samples, 2.99%)</title><rect x="58.6979%" y="277" width="2.9857%" height="15" fill="rgb(249,31,29)" fg:x="27291235" fg:w="1388191"/><text x="58.9479%" y="287.50">&lt;ox..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::enumerate::Enumerate&lt;alloc::vec::into_iter::IntoIter&lt;multi_producer::Event&gt;&gt;&gt; (1,388,191 samples, 2.99%)</title><rect x="58.6979%" y="261" width="2.9857%" height="15" fill="rgb(225,111,53)" fg:x="27291235" fg:w="1388191"/><text x="58.9479%" y="271.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;multi_producer::Event&gt;&gt; (1,388,191 samples, 2.99%)</title><rect x="58.6979%" y="245" width="2.9857%" height="15" fill="rgb(238,160,17)" fg:x="27291235" fg:w="1388191"/><text x="58.9479%" y="255.50">cor..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,388,191 samples, 2.99%)</title><rect x="58.6979%" y="229" width="2.9857%" height="15" fill="rgb(214,148,48)" fg:x="27291235" fg:w="1388191"/><text x="58.9479%" y="239.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;multi_producer::Event,alloc::alloc::Global&gt;&gt; (1,388,191 samples, 2.99%)</title><rect x="58.6979%" y="213" width="2.9857%" height="15" fill="rgb(232,36,49)" fg:x="27291235" fg:w="1388191"/><text x="58.9479%" y="223.50">cor..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,388,191 samples, 2.99%)</title><rect x="58.6979%" y="197" width="2.9857%" height="15" fill="rgb(209,103,24)" fg:x="27291235" fg:w="1388191"/><text x="58.9479%" y="207.50">&lt;&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;multi_producer::Event&gt;&gt; (1,388,191 samples, 2.99%)</title><rect x="58.6979%" y="181" width="2.9857%" height="15" fill="rgb(229,88,8)" fg:x="27291235" fg:w="1388191"/><text x="58.9479%" y="191.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,388,191 samples, 2.99%)</title><rect x="58.6979%" y="165" width="2.9857%" height="15" fill="rgb(213,181,19)" fg:x="27291235" fg:w="1388191"/><text x="58.9479%" y="175.50">&lt;al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,388,191 samples, 2.99%)</title><rect x="58.6979%" y="149" width="2.9857%" height="15" fill="rgb(254,191,54)" fg:x="27291235" fg:w="1388191"/><text x="58.9479%" y="159.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,388,191 samples, 2.99%)</title><rect x="58.6979%" y="133" width="2.9857%" height="15" fill="rgb(241,83,37)" fg:x="27291235" fg:w="1388191"/><text x="58.9479%" y="143.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (1,388,191 samples, 2.99%)</title><rect x="58.6979%" y="117" width="2.9857%" height="15" fill="rgb(233,36,39)" fg:x="27291235" fg:w="1388191"/><text x="58.9479%" y="127.50">all..</text></g><g><title>oxidator::traits::traits::AtomicSequence::compare_exchange (1,388,191 samples, 2.99%)</title><rect x="58.6979%" y="101" width="2.9857%" height="15" fill="rgb(226,3,54)" fg:x="27291235" fg:w="1388191"/><text x="58.9479%" y="111.50">oxi..</text></g><g><title>asm_exc_page_fault (172,480 samples, 0.37%)</title><rect x="61.6836%" y="277" width="0.3710%" height="15" fill="rgb(245,192,40)" fg:x="28679426" fg:w="172480"/><text x="61.9336%" y="287.50"></text></g><g><title>exc_page_fault (172,480 samples, 0.37%)</title><rect x="61.6836%" y="261" width="0.3710%" height="15" fill="rgb(238,167,29)" fg:x="28679426" fg:w="172480"/><text x="61.9336%" y="271.50"></text></g><g><title>do_user_addr_fault (172,480 samples, 0.37%)</title><rect x="61.6836%" y="245" width="0.3710%" height="15" fill="rgb(232,182,51)" fg:x="28679426" fg:w="172480"/><text x="61.9336%" y="255.50"></text></g><g><title>handle_mm_fault (172,480 samples, 0.37%)</title><rect x="61.6836%" y="229" width="0.3710%" height="15" fill="rgb(231,60,39)" fg:x="28679426" fg:w="172480"/><text x="61.9336%" y="239.50"></text></g><g><title>__handle_mm_fault (172,480 samples, 0.37%)</title><rect x="61.6836%" y="213" width="0.3710%" height="15" fill="rgb(208,69,12)" fg:x="28679426" fg:w="172480"/><text x="61.9336%" y="223.50"></text></g><g><title>do_anonymous_page (172,480 samples, 0.37%)</title><rect x="61.6836%" y="197" width="0.3710%" height="15" fill="rgb(235,93,37)" fg:x="28679426" fg:w="172480"/><text x="61.9336%" y="207.50"></text></g><g><title>__vmf_anon_prepare (172,480 samples, 0.37%)</title><rect x="61.6836%" y="181" width="0.3710%" height="15" fill="rgb(213,116,39)" fg:x="28679426" fg:w="172480"/><text x="61.9336%" y="191.50"></text></g><g><title>__anon_vma_prepare (172,480 samples, 0.37%)</title><rect x="61.6836%" y="165" width="0.3710%" height="15" fill="rgb(222,207,29)" fg:x="28679426" fg:w="172480"/><text x="61.9336%" y="175.50"></text></g><g><title>kmem_cache_alloc_noprof (172,480 samples, 0.37%)</title><rect x="61.6836%" y="149" width="0.3710%" height="15" fill="rgb(206,96,30)" fg:x="28679426" fg:w="172480"/><text x="61.9336%" y="159.50"></text></g><g><title>__memcg_slab_post_alloc_hook (172,480 samples, 0.37%)</title><rect x="61.6836%" y="133" width="0.3710%" height="15" fill="rgb(218,138,4)" fg:x="28679426" fg:w="172480"/><text x="61.9336%" y="143.50"></text></g><g><title>mmap64 (151,960 samples, 0.33%)</title><rect x="62.0546%" y="277" width="0.3268%" height="15" fill="rgb(250,191,14)" fg:x="28851906" fg:w="151960"/><text x="62.3046%" y="287.50"></text></g><g><title>__GI___mmap64 (151,960 samples, 0.33%)</title><rect x="62.0546%" y="261" width="0.3268%" height="15" fill="rgb(239,60,40)" fg:x="28851906" fg:w="151960"/><text x="62.3046%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (151,960 samples, 0.33%)</title><rect x="62.0546%" y="245" width="0.3268%" height="15" fill="rgb(206,27,48)" fg:x="28851906" fg:w="151960"/><text x="62.3046%" y="255.50"></text></g><g><title>do_syscall_64 (151,960 samples, 0.33%)</title><rect x="62.0546%" y="229" width="0.3268%" height="15" fill="rgb(225,35,8)" fg:x="28851906" fg:w="151960"/><text x="62.3046%" y="239.50"></text></g><g><title>vm_mmap_pgoff (151,960 samples, 0.33%)</title><rect x="62.0546%" y="213" width="0.3268%" height="15" fill="rgb(250,213,24)" fg:x="28851906" fg:w="151960"/><text x="62.3046%" y="223.50"></text></g><g><title>down_write_killable (101,962 samples, 0.22%)</title><rect x="62.3814%" y="197" width="0.2193%" height="15" fill="rgb(247,123,22)" fg:x="29003866" fg:w="101962"/><text x="62.6314%" y="207.50"></text></g><g><title>rwsem_down_write_slowpath (101,962 samples, 0.22%)</title><rect x="62.3814%" y="181" width="0.2193%" height="15" fill="rgb(231,138,38)" fg:x="29003866" fg:w="101962"/><text x="62.6314%" y="191.50"></text></g><g><title>rwsem_optimistic_spin (101,962 samples, 0.22%)</title><rect x="62.3814%" y="165" width="0.2193%" height="15" fill="rgb(231,145,46)" fg:x="29003866" fg:w="101962"/><text x="62.6314%" y="175.50"></text></g><g><title>rwsem_spin_on_owner (101,962 samples, 0.22%)</title><rect x="62.3814%" y="149" width="0.2193%" height="15" fill="rgb(251,118,11)" fg:x="29003866" fg:w="101962"/><text x="62.6314%" y="159.50"></text></g><g><title>vma_adjust_trans_huge (128,533 samples, 0.28%)</title><rect x="62.6007%" y="133" width="0.2764%" height="15" fill="rgb(217,147,25)" fg:x="29105828" fg:w="128533"/><text x="62.8507%" y="143.50"></text></g><g><title>__split_huge_pmd (128,533 samples, 0.28%)</title><rect x="62.6007%" y="117" width="0.2764%" height="15" fill="rgb(247,81,37)" fg:x="29105828" fg:w="128533"/><text x="62.8507%" y="127.50"></text></g><g><title>_raw_spin_unlock (128,533 samples, 0.28%)</title><rect x="62.6007%" y="101" width="0.2764%" height="15" fill="rgb(209,12,38)" fg:x="29105828" fg:w="128533"/><text x="62.8507%" y="111.50"></text></g><g><title>malloc (675,722 samples, 1.45%)</title><rect x="61.6836%" y="389" width="1.4533%" height="15" fill="rgb(227,1,9)" fg:x="28679426" fg:w="675722"/><text x="61.9336%" y="399.50"></text></g><g><title>tcache_init (675,722 samples, 1.45%)</title><rect x="61.6836%" y="373" width="1.4533%" height="15" fill="rgb(248,47,43)" fg:x="28679426" fg:w="675722"/><text x="61.9336%" y="383.50"></text></g><g><title>tcache_init.part.0 (675,722 samples, 1.45%)</title><rect x="61.6836%" y="357" width="1.4533%" height="15" fill="rgb(221,10,30)" fg:x="28679426" fg:w="675722"/><text x="61.9336%" y="367.50"></text></g><g><title>arena_get2 (675,722 samples, 1.45%)</title><rect x="61.6836%" y="341" width="1.4533%" height="15" fill="rgb(210,229,1)" fg:x="28679426" fg:w="675722"/><text x="61.9336%" y="351.50"></text></g><g><title>arena_get2.part.0 (675,722 samples, 1.45%)</title><rect x="61.6836%" y="325" width="1.4533%" height="15" fill="rgb(222,148,37)" fg:x="28679426" fg:w="675722"/><text x="61.9336%" y="335.50"></text></g><g><title>_int_new_arena (675,722 samples, 1.45%)</title><rect x="61.6836%" y="309" width="1.4533%" height="15" fill="rgb(234,67,33)" fg:x="28679426" fg:w="675722"/><text x="61.9336%" y="319.50"></text></g><g><title>alloc_new_heap (675,722 samples, 1.45%)</title><rect x="61.6836%" y="293" width="1.4533%" height="15" fill="rgb(247,98,35)" fg:x="28679426" fg:w="675722"/><text x="61.9336%" y="303.50"></text></g><g><title>mprotect (351,282 samples, 0.76%)</title><rect x="62.3814%" y="277" width="0.7555%" height="15" fill="rgb(247,138,52)" fg:x="29003866" fg:w="351282"/><text x="62.6314%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (351,282 samples, 0.76%)</title><rect x="62.3814%" y="261" width="0.7555%" height="15" fill="rgb(213,79,30)" fg:x="29003866" fg:w="351282"/><text x="62.6314%" y="271.50"></text></g><g><title>do_syscall_64 (351,282 samples, 0.76%)</title><rect x="62.3814%" y="245" width="0.7555%" height="15" fill="rgb(246,177,23)" fg:x="29003866" fg:w="351282"/><text x="62.6314%" y="255.50"></text></g><g><title>__x64_sys_mprotect (351,282 samples, 0.76%)</title><rect x="62.3814%" y="229" width="0.7555%" height="15" fill="rgb(230,62,27)" fg:x="29003866" fg:w="351282"/><text x="62.6314%" y="239.50"></text></g><g><title>do_mprotect_pkey (351,282 samples, 0.76%)</title><rect x="62.3814%" y="213" width="0.7555%" height="15" fill="rgb(216,154,8)" fg:x="29003866" fg:w="351282"/><text x="62.6314%" y="223.50"></text></g><g><title>mprotect_fixup (249,320 samples, 0.54%)</title><rect x="62.6007%" y="197" width="0.5362%" height="15" fill="rgb(244,35,45)" fg:x="29105828" fg:w="249320"/><text x="62.8507%" y="207.50"></text></g><g><title>vma_modify_flags (249,320 samples, 0.54%)</title><rect x="62.6007%" y="181" width="0.5362%" height="15" fill="rgb(251,115,12)" fg:x="29105828" fg:w="249320"/><text x="62.8507%" y="191.50"></text></g><g><title>vma_modify (249,320 samples, 0.54%)</title><rect x="62.6007%" y="165" width="0.5362%" height="15" fill="rgb(240,54,50)" fg:x="29105828" fg:w="249320"/><text x="62.8507%" y="175.50"></text></g><g><title>__split_vma (249,320 samples, 0.54%)</title><rect x="62.6007%" y="149" width="0.5362%" height="15" fill="rgb(233,84,52)" fg:x="29105828" fg:w="249320"/><text x="62.8507%" y="159.50"></text></g><g><title>vma_complete (120,787 samples, 0.26%)</title><rect x="62.8772%" y="133" width="0.2598%" height="15" fill="rgb(207,117,47)" fg:x="29234361" fg:w="120787"/><text x="63.1272%" y="143.50"></text></g><g><title>mas_store_prealloc (120,787 samples, 0.26%)</title><rect x="62.8772%" y="117" width="0.2598%" height="15" fill="rgb(249,43,39)" fg:x="29234361" fg:w="120787"/><text x="63.1272%" y="127.50"></text></g><g><title>mas_wr_bnode (120,787 samples, 0.26%)</title><rect x="62.8772%" y="101" width="0.2598%" height="15" fill="rgb(209,38,44)" fg:x="29234361" fg:w="120787"/><text x="63.1272%" y="111.50"></text></g><g><title>mas_split (120,787 samples, 0.26%)</title><rect x="62.8772%" y="85" width="0.2598%" height="15" fill="rgb(236,212,23)" fg:x="29234361" fg:w="120787"/><text x="63.1272%" y="95.50"></text></g><g><title>mas_push_data (120,787 samples, 0.26%)</title><rect x="62.8772%" y="69" width="0.2598%" height="15" fill="rgb(242,79,21)" fg:x="29234361" fg:w="120787"/><text x="63.1272%" y="79.50"></text></g><g><title>mas_split_final_node (120,787 samples, 0.26%)</title><rect x="62.8772%" y="53" width="0.2598%" height="15" fill="rgb(211,96,35)" fg:x="29234361" fg:w="120787"/><text x="63.1272%" y="63.50"></text></g><g><title>mab_mas_cp (120,787 samples, 0.26%)</title><rect x="62.8772%" y="37" width="0.2598%" height="15" fill="rgb(253,215,40)" fg:x="29234361" fg:w="120787"/><text x="63.1272%" y="47.50"></text></g><g><title>__GI___clone3 (17,509,412 samples, 37.66%)</title><rect x="25.7887%" y="501" width="37.6592%" height="15" fill="rgb(211,81,21)" fg:x="11990314" fg:w="17509412"/><text x="26.0387%" y="511.50">__GI___clone3</text></g><g><title>start_thread (17,509,412 samples, 37.66%)</title><rect x="25.7887%" y="485" width="37.6592%" height="15" fill="rgb(208,190,38)" fg:x="11990314" fg:w="17509412"/><text x="26.0387%" y="495.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (17,509,412 samples, 37.66%)</title><rect x="25.7887%" y="469" width="37.6592%" height="15" fill="rgb(235,213,38)" fg:x="11990314" fg:w="17509412"/><text x="26.0387%" y="479.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (820,300 samples, 1.76%)</title><rect x="61.6836%" y="453" width="1.7643%" height="15" fill="rgb(237,122,38)" fg:x="28679426" fg:w="820300"/><text x="61.9336%" y="463.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (820,300 samples, 1.76%)</title><rect x="61.6836%" y="437" width="1.7643%" height="15" fill="rgb(244,218,35)" fg:x="28679426" fg:w="820300"/><text x="61.9336%" y="447.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::current_guard (820,300 samples, 1.76%)</title><rect x="61.6836%" y="421" width="1.7643%" height="15" fill="rgb(240,68,47)" fg:x="28679426" fg:w="820300"/><text x="61.9336%" y="431.50"></text></g><g><title>pthread_getattr_np@GLIBC_2.2.5 (820,300 samples, 1.76%)</title><rect x="61.6836%" y="405" width="1.7643%" height="15" fill="rgb(210,16,53)" fg:x="28679426" fg:w="820300"/><text x="61.9336%" y="415.50"></text></g><g><title>pthread_getaffinity_np@@GLIBC_2.32 (144,578 samples, 0.31%)</title><rect x="63.1370%" y="389" width="0.3110%" height="15" fill="rgb(235,124,12)" fg:x="29355148" fg:w="144578"/><text x="63.3870%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (144,578 samples, 0.31%)</title><rect x="63.1370%" y="373" width="0.3110%" height="15" fill="rgb(224,169,11)" fg:x="29355148" fg:w="144578"/><text x="63.3870%" y="383.50"></text></g><g><title>do_syscall_64 (144,578 samples, 0.31%)</title><rect x="63.1370%" y="357" width="0.3110%" height="15" fill="rgb(250,166,2)" fg:x="29355148" fg:w="144578"/><text x="63.3870%" y="367.50"></text></g><g><title>__x64_sys_sched_getaffinity (144,578 samples, 0.31%)</title><rect x="63.1370%" y="341" width="0.3110%" height="15" fill="rgb(242,216,29)" fg:x="29355148" fg:w="144578"/><text x="63.3870%" y="351.50"></text></g><g><title>sched_getaffinity (144,578 samples, 0.31%)</title><rect x="63.1370%" y="325" width="0.3110%" height="15" fill="rgb(230,116,27)" fg:x="29355148" fg:w="144578"/><text x="63.3870%" y="335.50"></text></g><g><title>security_task_getscheduler (144,578 samples, 0.31%)</title><rect x="63.1370%" y="309" width="0.3110%" height="15" fill="rgb(228,99,48)" fg:x="29355148" fg:w="144578"/><text x="63.3870%" y="319.50"></text></g><g><title>avc_has_perm (144,578 samples, 0.31%)</title><rect x="63.1370%" y="293" width="0.3110%" height="15" fill="rgb(253,11,6)" fg:x="29355148" fg:w="144578"/><text x="63.3870%" y="303.50"></text></g><g><title>avc_has_perm_noaudit (144,578 samples, 0.31%)</title><rect x="63.1370%" y="277" width="0.3110%" height="15" fill="rgb(247,143,39)" fg:x="29355148" fg:w="144578"/><text x="63.3870%" y="287.50"></text></g><g><title>avc_lookup (144,578 samples, 0.31%)</title><rect x="63.1370%" y="261" width="0.3110%" height="15" fill="rgb(236,97,10)" fg:x="29355148" fg:w="144578"/><text x="63.3870%" y="271.50"></text></g><g><title>_int_free (2,002,221 samples, 4.31%)</title><rect x="63.4479%" y="501" width="4.3064%" height="15" fill="rgb(233,208,19)" fg:x="29499726" fg:w="2002221"/><text x="63.6979%" y="511.50">_int_..</text></g><g><title>_start (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="501" width="5.4518%" height="15" fill="rgb(216,164,2)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="511.50">_start</text></g><g><title>__libc_start_main@GLIBC_2.2.5 (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="485" width="5.4518%" height="15" fill="rgb(220,129,5)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="495.50">__libc_..</text></g><g><title>__libc_start_call_main (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="469" width="5.4518%" height="15" fill="rgb(242,17,10)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="479.50">__libc_..</text></g><g><title>main (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="453" width="5.4518%" height="15" fill="rgb(242,107,0)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="463.50">main</text></g><g><title>std::rt::lang_start_internal (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="437" width="5.4518%" height="15" fill="rgb(251,28,31)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="447.50">std::rt..</text></g><g><title>std::panic::catch_unwind (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="421" width="5.4518%" height="15" fill="rgb(233,223,10)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="431.50">std::pa..</text></g><g><title>std::panicking::try (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="405" width="5.4518%" height="15" fill="rgb(215,21,27)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="415.50">std::pa..</text></g><g><title>std::panicking::try::do_call (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="389" width="5.4518%" height="15" fill="rgb(232,23,21)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="399.50">std::pa..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="373" width="5.4518%" height="15" fill="rgb(244,5,23)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="383.50">std::rt..</text></g><g><title>std::rt::init (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="357" width="5.4518%" height="15" fill="rgb(226,81,46)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="367.50">std::rt..</text></g><g><title>std::sys::pal::unix::init (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="341" width="5.4518%" height="15" fill="rgb(247,70,30)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="351.50">std::sy..</text></g><g><title>std::sys::pal::unix::init::sanitize_standard_fds (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="325" width="5.4518%" height="15" fill="rgb(212,68,19)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="335.50">std::sy..</text></g><g><title>poll (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="309" width="5.4518%" height="15" fill="rgb(240,187,13)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="319.50">poll</text></g><g><title>entry_SYSCALL_64_after_hwframe (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="293" width="5.4518%" height="15" fill="rgb(223,113,26)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="303.50">entry_S..</text></g><g><title>do_syscall_64 (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="277" width="5.4518%" height="15" fill="rgb(206,192,2)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="287.50">do_sysc..</text></g><g><title>__x64_sys_poll (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="261" width="5.4518%" height="15" fill="rgb(241,108,4)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="271.50">__x64_s..</text></g><g><title>do_sys_poll (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="245" width="5.4518%" height="15" fill="rgb(247,173,49)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="255.50">do_sys_..</text></g><g><title>do_poll.constprop.0 (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="229" width="5.4518%" height="15" fill="rgb(224,114,35)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="239.50">do_poll..</text></g><g><title>tty_poll (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="213" width="5.4518%" height="15" fill="rgb(245,159,27)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="223.50">tty_poll</text></g><g><title>n_tty_poll (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="197" width="5.4518%" height="15" fill="rgb(245,172,44)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="207.50">n_tty_p..</text></g><g><title>tty_buffer_space_avail (2,534,786 samples, 5.45%)</title><rect x="67.7543%" y="181" width="5.4518%" height="15" fill="rgb(236,23,11)" fg:x="31501947" fg:w="2534786"/><text x="68.0043%" y="191.50">tty_buf..</text></g><g><title>folio_alloc_mpol_noprof (5,958 samples, 0.01%)</title><rect x="73.2061%" y="373" width="0.0128%" height="15" fill="rgb(205,117,38)" fg:x="34036733" fg:w="5958"/><text x="73.4561%" y="383.50"></text></g><g><title>alloc_pages_mpol (5,958 samples, 0.01%)</title><rect x="73.2061%" y="357" width="0.0128%" height="15" fill="rgb(237,72,25)" fg:x="34036733" fg:w="5958"/><text x="73.4561%" y="367.50"></text></g><g><title>__alloc_frozen_pages_noprof (5,958 samples, 0.01%)</title><rect x="73.2061%" y="341" width="0.0128%" height="15" fill="rgb(244,70,9)" fg:x="34036733" fg:w="5958"/><text x="73.4561%" y="351.50"></text></g><g><title>get_page_from_freelist (5,958 samples, 0.01%)</title><rect x="73.2061%" y="325" width="0.0128%" height="15" fill="rgb(217,125,39)" fg:x="34036733" fg:w="5958"/><text x="73.4561%" y="335.50"></text></g><g><title>post_alloc_hook (5,958 samples, 0.01%)</title><rect x="73.2061%" y="309" width="0.0128%" height="15" fill="rgb(235,36,10)" fg:x="34036733" fg:w="5958"/><text x="73.4561%" y="319.50"></text></g><g><title>clear_page_erms (5,958 samples, 0.01%)</title><rect x="73.2061%" y="293" width="0.0128%" height="15" fill="rgb(251,123,47)" fg:x="34036733" fg:w="5958"/><text x="73.4561%" y="303.50"></text></g><g><title>handle_mm_fault (13,488 samples, 0.03%)</title><rect x="73.2061%" y="453" width="0.0290%" height="15" fill="rgb(221,13,13)" fg:x="34036733" fg:w="13488"/><text x="73.4561%" y="463.50"></text></g><g><title>__handle_mm_fault (13,488 samples, 0.03%)</title><rect x="73.2061%" y="437" width="0.0290%" height="15" fill="rgb(238,131,9)" fg:x="34036733" fg:w="13488"/><text x="73.4561%" y="447.50"></text></g><g><title>do_anonymous_page (13,488 samples, 0.03%)</title><rect x="73.2061%" y="421" width="0.0290%" height="15" fill="rgb(211,50,8)" fg:x="34036733" fg:w="13488"/><text x="73.4561%" y="431.50"></text></g><g><title>alloc_anon_folio (13,488 samples, 0.03%)</title><rect x="73.2061%" y="405" width="0.0290%" height="15" fill="rgb(245,182,24)" fg:x="34036733" fg:w="13488"/><text x="73.4561%" y="415.50"></text></g><g><title>vma_alloc_folio_noprof (13,488 samples, 0.03%)</title><rect x="73.2061%" y="389" width="0.0290%" height="15" fill="rgb(242,14,37)" fg:x="34036733" fg:w="13488"/><text x="73.4561%" y="399.50"></text></g><g><title>get_vma_policy (7,530 samples, 0.02%)</title><rect x="73.2189%" y="373" width="0.0162%" height="15" fill="rgb(246,228,12)" fg:x="34042691" fg:w="7530"/><text x="73.4689%" y="383.50"></text></g><g><title>down_read_trylock (6,092 samples, 0.01%)</title><rect x="73.2605%" y="437" width="0.0131%" height="15" fill="rgb(213,55,15)" fg:x="34062052" fg:w="6092"/><text x="73.5105%" y="447.50"></text></g><g><title>asm_exc_page_fault (35,824 samples, 0.08%)</title><rect x="73.2061%" y="501" width="0.0771%" height="15" fill="rgb(209,9,3)" fg:x="34036733" fg:w="35824"/><text x="73.4561%" y="511.50"></text></g><g><title>exc_page_fault (35,824 samples, 0.08%)</title><rect x="73.2061%" y="485" width="0.0771%" height="15" fill="rgb(230,59,30)" fg:x="34036733" fg:w="35824"/><text x="73.4561%" y="495.50"></text></g><g><title>do_user_addr_fault (35,824 samples, 0.08%)</title><rect x="73.2061%" y="469" width="0.0771%" height="15" fill="rgb(209,121,21)" fg:x="34036733" fg:w="35824"/><text x="73.4561%" y="479.50"></text></g><g><title>lock_vma_under_rcu (22,336 samples, 0.05%)</title><rect x="73.2351%" y="453" width="0.0480%" height="15" fill="rgb(220,109,13)" fg:x="34050221" fg:w="22336"/><text x="73.4851%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,660,456 samples, 3.57%)</title><rect x="73.2831%" y="501" width="3.5713%" height="15" fill="rgb(232,18,1)" fg:x="34072557" fg:w="1660456"/><text x="73.5331%" y="511.50">cfre..</text></g><g><title>__x64_sys_execve (112,718 samples, 0.24%)</title><rect x="76.8544%" y="469" width="0.2424%" height="15" fill="rgb(215,41,42)" fg:x="35733013" fg:w="112718"/><text x="77.1044%" y="479.50"></text></g><g><title>do_execveat_common.isra.0 (112,718 samples, 0.24%)</title><rect x="76.8544%" y="453" width="0.2424%" height="15" fill="rgb(224,123,36)" fg:x="35733013" fg:w="112718"/><text x="77.1044%" y="463.50"></text></g><g><title>bprm_execve.part.0 (112,718 samples, 0.24%)</title><rect x="76.8544%" y="437" width="0.2424%" height="15" fill="rgb(240,125,3)" fg:x="35733013" fg:w="112718"/><text x="77.1044%" y="447.50"></text></g><g><title>exec_binprm (112,718 samples, 0.24%)</title><rect x="76.8544%" y="421" width="0.2424%" height="15" fill="rgb(205,98,50)" fg:x="35733013" fg:w="112718"/><text x="77.1044%" y="431.50"></text></g><g><title>load_elf_binary (112,718 samples, 0.24%)</title><rect x="76.8544%" y="405" width="0.2424%" height="15" fill="rgb(205,185,37)" fg:x="35733013" fg:w="112718"/><text x="77.1044%" y="415.50"></text></g><g><title>elf_load (112,718 samples, 0.24%)</title><rect x="76.8544%" y="389" width="0.2424%" height="15" fill="rgb(238,207,15)" fg:x="35733013" fg:w="112718"/><text x="77.1044%" y="399.50"></text></g><g><title>__vm_munmap (112,718 samples, 0.24%)</title><rect x="76.8544%" y="373" width="0.2424%" height="15" fill="rgb(213,199,42)" fg:x="35733013" fg:w="112718"/><text x="77.1044%" y="383.50"></text></g><g><title>do_vmi_munmap (112,718 samples, 0.24%)</title><rect x="76.8544%" y="357" width="0.2424%" height="15" fill="rgb(235,201,11)" fg:x="35733013" fg:w="112718"/><text x="77.1044%" y="367.50"></text></g><g><title>do_vmi_align_munmap (112,718 samples, 0.24%)</title><rect x="76.8544%" y="341" width="0.2424%" height="15" fill="rgb(207,46,11)" fg:x="35733013" fg:w="112718"/><text x="77.1044%" y="351.50"></text></g><g><title>vms_gather_munmap_vmas (112,718 samples, 0.24%)</title><rect x="76.8544%" y="325" width="0.2424%" height="15" fill="rgb(241,35,35)" fg:x="35733013" fg:w="112718"/><text x="77.1044%" y="335.50"></text></g><g><title>__split_vma (112,718 samples, 0.24%)</title><rect x="76.8544%" y="309" width="0.2424%" height="15" fill="rgb(243,32,47)" fg:x="35733013" fg:w="112718"/><text x="77.1044%" y="319.50"></text></g><g><title>vma_prepare (112,718 samples, 0.24%)</title><rect x="76.8544%" y="293" width="0.2424%" height="15" fill="rgb(247,202,23)" fg:x="35733013" fg:w="112718"/><text x="77.1044%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (10,754,831 samples, 23.13%)</title><rect x="76.8544%" y="501" width="23.1315%" height="15" fill="rgb(219,102,11)" fg:x="35733013" fg:w="10754831"/><text x="77.1044%" y="511.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (10,754,831 samples, 23.13%)</title><rect x="76.8544%" y="485" width="23.1315%" height="15" fill="rgb(243,110,44)" fg:x="35733013" fg:w="10754831"/><text x="77.1044%" y="495.50">do_syscall_64</text></g><g><title>__x64_sys_sched_yield (10,642,113 samples, 22.89%)</title><rect x="77.0969%" y="469" width="22.8890%" height="15" fill="rgb(222,74,54)" fg:x="35845731" fg:w="10642113"/><text x="77.3469%" y="479.50">__x64_sys_sched_yield</text></g><g><title>schedule (10,642,113 samples, 22.89%)</title><rect x="77.0969%" y="453" width="22.8890%" height="15" fill="rgb(216,99,12)" fg:x="35845731" fg:w="10642113"/><text x="77.3469%" y="463.50">schedule</text></g><g><title>__schedule (10,642,113 samples, 22.89%)</title><rect x="77.0969%" y="437" width="22.8890%" height="15" fill="rgb(226,22,26)" fg:x="35845731" fg:w="10642113"/><text x="77.3469%" y="447.50">__schedule</text></g><g><title>__pick_next_task (10,642,113 samples, 22.89%)</title><rect x="77.0969%" y="421" width="22.8890%" height="15" fill="rgb(217,163,10)" fg:x="35845731" fg:w="10642113"/><text x="77.3469%" y="431.50">__pick_next_task</text></g><g><title>pick_next_task_fair (10,642,113 samples, 22.89%)</title><rect x="77.0969%" y="405" width="22.8890%" height="15" fill="rgb(213,25,53)" fg:x="35845731" fg:w="10642113"/><text x="77.3469%" y="415.50">pick_next_task_fair</text></g><g><title>pick_task_fair (10,642,113 samples, 22.89%)</title><rect x="77.0969%" y="389" width="22.8890%" height="15" fill="rgb(252,105,26)" fg:x="35845731" fg:w="10642113"/><text x="77.3469%" y="399.50">pick_task_fair</text></g><g><title>update_curr (10,642,113 samples, 22.89%)</title><rect x="77.0969%" y="373" width="22.8890%" height="15" fill="rgb(220,39,43)" fg:x="35845731" fg:w="10642113"/><text x="77.3469%" y="383.50">update_curr</text></g><g><title>__calc_delta.constprop.0 (6,480,566 samples, 13.94%)</title><rect x="86.0475%" y="357" width="13.9384%" height="15" fill="rgb(229,68,48)" fg:x="40007278" fg:w="6480566"/><text x="86.2975%" y="367.50">__calc_delta.constpro..</text></g><g><title>multi_producer (46,489,691 samples, 99.99%)</title><rect x="0.0000%" y="517" width="99.9899%" height="15" fill="rgb(252,8,32)" fg:x="0" fg:w="46489691"/><text x="0.2500%" y="527.50">multi_producer</text></g><g><title>all (46,494,401 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="46494401"/><text x="0.2500%" y="543.50"></text></g><g><title>perf-exec (4,710 samples, 0.01%)</title><rect x="99.9899%" y="517" width="0.0101%" height="15" fill="rgb(229,81,49)" fg:x="46489691" fg:w="4710"/><text x="100.2399%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4,710 samples, 0.01%)</title><rect x="99.9899%" y="501" width="0.0101%" height="15" fill="rgb(236,28,36)" fg:x="46489691" fg:w="4710"/><text x="100.2399%" y="511.50"></text></g><g><title>do_syscall_64 (4,710 samples, 0.01%)</title><rect x="99.9899%" y="485" width="0.0101%" height="15" fill="rgb(249,185,26)" fg:x="46489691" fg:w="4710"/><text x="100.2399%" y="495.50"></text></g><g><title>__x64_sys_execve (4,710 samples, 0.01%)</title><rect x="99.9899%" y="469" width="0.0101%" height="15" fill="rgb(249,174,33)" fg:x="46489691" fg:w="4710"/><text x="100.2399%" y="479.50"></text></g><g><title>do_execveat_common.isra.0 (4,710 samples, 0.01%)</title><rect x="99.9899%" y="453" width="0.0101%" height="15" fill="rgb(233,201,37)" fg:x="46489691" fg:w="4710"/><text x="100.2399%" y="463.50"></text></g><g><title>bprm_execve.part.0 (4,710 samples, 0.01%)</title><rect x="99.9899%" y="437" width="0.0101%" height="15" fill="rgb(221,78,26)" fg:x="46489691" fg:w="4710"/><text x="100.2399%" y="447.50"></text></g><g><title>exec_binprm (4,710 samples, 0.01%)</title><rect x="99.9899%" y="421" width="0.0101%" height="15" fill="rgb(250,127,30)" fg:x="46489691" fg:w="4710"/><text x="100.2399%" y="431.50"></text></g><g><title>load_elf_binary (4,710 samples, 0.01%)</title><rect x="99.9899%" y="405" width="0.0101%" height="15" fill="rgb(230,49,44)" fg:x="46489691" fg:w="4710"/><text x="100.2399%" y="415.50"></text></g><g><title>begin_new_exec (4,710 samples, 0.01%)</title><rect x="99.9899%" y="389" width="0.0101%" height="15" fill="rgb(229,67,23)" fg:x="46489691" fg:w="4710"/><text x="100.2399%" y="399.50"></text></g><g><title>perf_event_exec (4,710 samples, 0.01%)</title><rect x="99.9899%" y="373" width="0.0101%" height="15" fill="rgb(249,83,47)" fg:x="46489691" fg:w="4710"/><text x="100.2399%" y="383.50"></text></g></svg></svg>